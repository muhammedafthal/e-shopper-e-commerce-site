
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password</title>
    <!-- Link to external CSS -->
    <link rel="stylesheet" href="/css/resetPassword.css">
</head>
<body>
    <div class="reset-container">
        <h2>Reset Password</h2>
        <form id="resetForm" action="/resetPassword/reset" method="POST">
            <div>
                <input type="text" id="new_password" name="new_password" placeholder="New password" required>
                <span id="newPasswordError" class="error-message" style="color: red; display: none;">
                    Password must contain at least 8 characters, including uppercase, lowercase, number, and special character.
                </span>
            </div>
            <div>
                <input type="text" id="confirm_password" name="confirm_password" placeholder="Confirm password" required>
                <span id="confirmPasswordError" class="error-message" style="color: red; display: none;">
                    Passwords do not match.
                </span>
            </div>
            <button type="submit">Submit</button>
        </form>
    </div>

    <script>
        const resetForm = document.getElementById('resetForm');
        const newPasswordInput = document.getElementById('new_password');
        const confirmPasswordInput = document.getElementById('confirm_password');
        const newPasswordError = document.getElementById('newPasswordError');
        const confirmPasswordError = document.getElementById('confirmPasswordError');

        // Password strength pattern: at least one lowercase letter, one uppercase letter, one number, one special character, and 8 characters minimum
        const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;

        resetForm.addEventListener('submit', (event) => {
            let valid = true;

            // Validate new password strength
            if (!passwordPattern.test(newPasswordInput.value)) {
                newPasswordError.style.display = 'block';
                valid = false;
            } else {
                newPasswordError.style.display = 'none';
            }

            // Validate password match
            if (newPasswordInput.value !== confirmPasswordInput.value) {
                confirmPasswordError.style.display = 'block';
                valid = false;
            } else {
                confirmPasswordError.style.display = 'none';
            }

            // Prevent form submission if any validation fails
            if (!valid) {
                event.preventDefault();
            }
        });

        // Hide error messages while typing
        newPasswordInput.addEventListener('input', () => {
            if (passwordPattern.test(newPasswordInput.value)) {
                newPasswordError.style.display = 'none';
            }
        });

        confirmPasswordInput.addEventListener('input', () => {
            if (newPasswordInput.value === confirmPasswordInput.value) {
                confirmPasswordError.style.display = 'none';
            }
        });
    </script>
</body>
</html>
